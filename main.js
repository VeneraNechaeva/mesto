(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,n){if("object"!==t(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}var n=function(){function t(e,n,r,o,i,u){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._templateSelector=n,this._data=e,this._handleCardClick=r,this._handleFormConfirmSubmit=o,this._api=i,this._liked=void 0!==e.likes.find((function(t){return t._id===u})),this._isMy=e.owner._id===u||void 0===u}var n,r;return n=t,(r=[{key:"getData",value:function(){return this._data}},{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_handleLikeCard",value:function(t){var e=this;(this._liked?this._api.deletLike(this._data._id):this._api.setLike(this._data._id)).then((function(n){t.target.classList.toggle("element__icon-like_active"),e._liked?e._likesCount.textContent=e._data.likes.length:e._likesCount.textContent=e._data.likes.length+1,e._liked=!e._liked})).catch((function(t){console.log(t)}))}},{key:"deleteCard",value:function(){this._element.remove(),this._element}},{key:"_setEventListeners",value:function(){var t=this;this._cardLikeButton.addEventListener("click",(function(e){t._handleLikeCard(e)})),this._cardImage.addEventListener("click",(function(){t._handleCardClick(t._data.name,t._data.link)})),this._cardDeleteButton.addEventListener("click",(function(e){t._handleFormConfirmSubmit(e,t)}))}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._cardLikeButton=this._element.querySelector(".element__icon-like"),this._cardDeleteButton=this._element.querySelector(".element__delete-button"),this._cardImage=this._element.querySelector(".element__image"),this._likesCount=this._element.querySelector(".element__counter"),this._setEventListeners(),this._cardImage.src=this._data.link,this._cardImage.alt=this._data.name,this._likesCount.textContent=this._data.likes.length,this._element.querySelector(".element__text").textContent=this._data.name,this._liked&&this._cardLikeButton.classList.add("element__icon-like_active"),this._isMy||this._cardDeleteButton.remove(),this._element}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(),r=document.querySelector(".profile"),o=r.querySelector(".profile__edit-button"),i=document.forms["edit-profile"],u=i.querySelector(".popup__field_text_name"),a=i.querySelector(".popup__field_text_info"),c=(document.querySelector(".elements"),r.querySelector(".profile__add-button")),l=document.querySelector(".profile__avatar-button");function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,p(r.key),r)}}function p(t){var e=function(t,e){if("object"!==s(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==s(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===s(e)?e:String(e)}var y=function(){function t(e,n){var r,o,i,u=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,i=function(){u._formElement.addEventListener("reset",(function(){u._disableButtonSubmit()})),u._toggleButtonState(),u._inputList.forEach((function(t){t.addEventListener("input",(function(){u._checkInputValidity(t),u._toggleButtonState()}))}))},(o=p(o="_setEventListeners"))in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,this._settingsObject=e,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._settingsObject.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settingsObject.submitButtonSelector),this._errorElements={},this._inputList.forEach((function(t){var e=u._formElement.querySelector(".".concat(t.id,"-error"));u._errorElements[t.id]=e}))}var e,n;return e=t,(n=[{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(t){return t.preventDefault()})),this._setEventListeners()}},{key:"_checkInputValidity",value:function(t){var e=this._errorElements[t.id];t.validity.valid?this._hideInputError(e,t):this._showInputError(e,t,t.validationMessage)}},{key:"_showInputError",value:function(t,e,n){e.classList.add(this._settingsObject.inputErrorClass),t.textContent=n,t.classList.add(this._settingsObject.errorClass)}},{key:"_hideInputError",value:function(t,e){e.classList.remove(this._settingsObject.inputErrorClass),t.classList.remove(this._settingsObject.errorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(t){return!t.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this._disableButtonSubmit():(this._buttonElement.classList.remove(this._settingsObject.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}},{key:"_disableButtonSubmit",value:function(){this._buttonElement.classList.add(this._settingsObject.inactiveButtonClass),this._buttonElement.setAttribute("disabled","disabled")}},{key:"resetValidation",value:function(){var t=this;this._toggleButtonState(),this._inputList.forEach((function(e){var n=t._errorElements[e.id];t._hideInputError(n,e)}))}}])&&f(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==d(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==d(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===d(o)?o:String(o)),r)}var o}var m=function(){function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var e,n;return e=t,(n=[{key:"renderItems",value:function(){var t=this;this._renderedItems.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&h(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function v(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function _(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?v(Object(n),!0).forEach((function(e){g(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function g(t,e,n){return(e=w(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,w(r.key),r)}}function w(t){var e=function(t,e){if("object"!==b(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==b(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===b(e)?e:String(e)}var E=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=e.baseUrl,this._headers=e.headers}var e,n;return e=t,(n=[{key:"_sendRequest",value:function(t,e){return fetch(t,e).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"getUserInformation",value:function(){return this._sendRequest("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers})}},{key:"getInitialCards",value:function(){return this._sendRequest("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers})}},{key:"savetUserInformation",value:function(t,e){return this._sendRequest("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:_(_({},this._headers),{"Content-Type":"application/json"}),body:JSON.stringify({name:t,about:e})})}},{key:"addNewCard",value:function(t,e){return this._sendRequest("".concat(this._baseUrl,"/cards"),{method:"POST",headers:_(_({},this._headers),{"Content-Type":"application/json"}),body:JSON.stringify({name:t,link:e})})}},{key:"deletCard",value:function(t){return this._sendRequest("".concat(this._baseUrl,"/cards/").concat(t),{method:"DELETE",headers:this._headers})}},{key:"setLike",value:function(t){return this._sendRequest("".concat(this._baseUrl,"/cards/").concat(t,"/likes"),{method:"PUT",headers:this._headers})}},{key:"deletLike",value:function(t){return this._sendRequest("".concat(this._baseUrl,"/cards/").concat(t,"/likes"),{method:"DELETE",headers:this._headers})}},{key:"changeAvatar",value:function(t){return this._sendRequest("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:_(_({},this._headers),{"Content-Type":"application/json"}),body:JSON.stringify({avatar:t})})}}])&&S(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function O(t){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},O(t)}function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==O(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==O(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===O(o)?o:String(o)),r)}var o}var k=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}var e,n;return e=t,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._popupElement.addEventListener("mousedown",(function(e){e.target.classList.contains("popup_opened")&&t.close(),e.target.classList.contains("popup__close-icon")&&t.close()}))}}])&&j(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function C(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==P(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==P(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===P(o)?o:String(o)),r)}var o}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=I(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},L.apply(this,arguments)}function T(t,e){return T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},T(t,e)}function I(t){return I=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},I(t)}var q=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&T(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=I(r);if(o){var n=I(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===P(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t))._popupImage=e._popupElement.querySelector(".popup__image"),e._popupText=e._popupElement.querySelector(".popup__text"),e}return e=u,(n=[{key:"open",value:function(t,e){L(I(u.prototype),"open",this).call(this),this._popupImage.src=e,this._popupImage.alt=t,this._popupText.textContent=t}}])&&C(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(k);function R(t){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},R(t)}function B(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==R(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==R(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===R(o)?o:String(o)),r)}var o}function x(){return x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=A(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},x.apply(this,arguments)}function U(t,e){return U=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},U(t,e)}function D(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function A(t){return A=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},A(t)}var F=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&U(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=A(r);if(o){var n=A(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===R(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return D(t)}(this,t)});function u(t,e,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t))._resetFormOnClose=n,r._handleFormCardSubmit=e.bind(D(r)),r._form=r._popupElement.querySelector("form"),r._popupButton=r._popupElement.querySelector(".popup__button"),r}return e=u,(n=[{key:"_getInputValues",value:function(){var t={};return Array.from(this._form.querySelectorAll("input")).forEach((function(e){t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var t=this;x(A(u.prototype),"setEventListeners",this).call(this),this._popupElement.addEventListener("submit",(function(e){t._handleFormCardSubmit(e,t._getInputValues(),t._popupButton)}))}},{key:"close",value:function(){x(A(u.prototype),"close",this).call(this),this._resetFormOnClose&&this._form.reset()}}])&&B(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(k);function V(t){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},V(t)}function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==V(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==V(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===V(o)?o:String(o)),r)}var o}function J(){return J="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=H(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},J.apply(this,arguments)}function M(t,e){return M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},M(t,e)}function G(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function H(t){return H=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},H(t)}var z=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&M(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=H(r);if(o){var n=H(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===V(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return G(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t))._handleFormConfirmSubmit=e.bind(G(n)),n}return e=u,(n=[{key:"open",value:function(t,e){J(H(u.prototype),"open",this).call(this),this._item=e}},{key:"setEventListeners",value:function(){var t=this;J(H(u.prototype),"setEventListeners",this).call(this),this._popupElement.addEventListener("submit",(function(e){t._handleFormConfirmSubmit(e,t._item)}))}}])&&N(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(k);function K(t){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},K(t)}function Q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==K(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==K(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===K(o)?o:String(o)),r)}var o}var W,X=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nameSelector=document.querySelector(e),this._infoSelector=document.querySelector(n),this._avatarSelector=document.querySelector(r)}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return{name:this._nameSelector.textContent,info:this._infoSelector.textContent}}},{key:"setUserInfo",value:function(t,e){this._nameSelector.textContent=t,this._infoSelector.textContent=e}},{key:"setUserAvatar",value:function(t){this._avatarSelector.src=t}}])&&Q(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Y=new E({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-66",headers:{authorization:"e9c671c4-c4d8-4942-9020-977fdfc1a3d7","Content-Type":"application/json"}}),Z=new X(".profile__title",".profile__subtitle",".profile__avatar");Y.getUserInformation().then((function(t){Z.setUserInfo(t.name,t.about),Z.setUserAvatar(t.avatar),Y.getInitialCards().then((function(e){(W=new m({items:e.reverse(),renderer:function(e){var n=ot(e,t._id);W.addItem(n)}},".elements")).renderItems()})).catch((function(t){console.log(t)}))})).catch((function(t){console.log(t)}));var $=new F(".popup_edit",(function(t,e,n){var r=e.name,o=e.info;tt(n,"Сохранение..."),Y.savetUserInformation(r,o).then((function(t){Z.setUserInfo(r,o),$.close()})).catch((function(t){console.log(t)})).finally((function(){tt(n,"Сохранить")}))}),!1);function tt(t,e){t.textContent=e}$.setEventListeners();var et=new F(".popup_add",(function(t,e,n){t.preventDefault(),tt(n,"Сохранение..."),Y.addNewCard(e.name,e.link).then((function(t){var e=ot(t);W.addItem(e),et.close(et)})).catch((function(t){console.log(t)})).finally((function(){tt(n,"Добавить")}))}),!0);et.setEventListeners();var nt=new q(".popup_img");nt.setEventListeners();var rt=new z(".popup_confirm",(function(t,e){t.preventDefault(),Y.deletCard(e.getData()._id).then((function(t){rt.close(),e.deleteCard()})).catch((function(t){console.log(t)}))}),!0);function ot(t,e){return new n(t,"#card",nt.open.bind(nt),rt.open.bind(rt),Y,e).generateCard()}rt.setEventListeners();var it,ut={};it={formSelector:".popup__form",inputSelector:".popup__field",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__field_type_error",errorClass:"popup__error_visible"},Array.from(document.querySelectorAll(it.formSelector)).forEach((function(t){var e=new y(it,t),n=t.getAttribute("name");ut[n]=e,e.enableValidation()})),o.addEventListener("click",(function(t){var e;e=Z.getUserInfo(),u.value=e.name,a.value=e.info,$.open(),ut["edit-profile"].resetValidation()})),c.addEventListener("click",(function(t){et.open()}));var at=new F(".popup_avatar",(function(t,e,n){t.preventDefault(),tt(n,"Сохранение..."),Y.changeAvatar(e.avatar).then((function(t){Z.setUserAvatar(t.avatar)})).catch((function(t){console.log(t)})).finally((function(){tt(n,"Сохранить"),at.close()}))}),!0);at.setEventListeners(),l.addEventListener("click",(function(t){at.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,